// Clientâ€‘side JavaScript for Student views

document.addEventListener('DOMContentLoaded', () => {
    /*
     * Programme list search and filter.  If the page contains a programme
     * search input or level filter select, attach event handlers to filter
     * programme cards in real time.  Programme cards must have
     * data-name, data-description and data-level attributes for this to work.
     */
    const searchInput   = document.getElementById('programmeSearch');
    const levelFilter   = document.getElementById('levelFilter');
    const programmeList = document.getElementById('programmeList');

    function applyProgrammeFilters() {
        if (!programmeList) return;
        const cards = programmeList.querySelectorAll('.programme-card');
        const query = searchInput ? searchInput.value.trim().toLowerCase() : '';
        const level = levelFilter ? levelFilter.value : 'all';
        cards.forEach(card => {
            const name  = card.dataset.name || '';
            const desc  = card.dataset.description || '';
            const cardLevel = card.dataset.level || '';
            let show = true;
            if (query && !(name.includes(query) || desc.includes(query))) {
                show = false;
            }
            if (level !== 'all' && level !== '' && cardLevel !== level) {
                show = false;
            }
            card.style.display = show ? '' : 'none';
        });
    }
    if (searchInput) {
        searchInput.addEventListener('input', applyProgrammeFilters);
    }
    if (levelFilter) {
        levelFilter.addEventListener('change', applyProgrammeFilters);
    }

    /*
     * Module list toggles.  Each year heading has class year-heading and
     * adjacent module list.  Clicking the heading toggles the list
     * visibility and rotates the indicator.  Works on programme details page.
     */
    document.querySelectorAll('.year-heading').forEach(heading => {
        heading.addEventListener('click', () => {
            const list = heading.nextElementSibling;
            if (list && list.classList.contains('module-list')) {
                const visible = list.style.display !== 'none';
                list.style.display = visible ? 'none' : 'block';
                const indicator = heading.querySelector('.toggle-indicator');
                if (indicator) {
                    indicator.textContent = visible ? '\u25B6' /* right arrow */ : '\u25BC' /* down arrow */;
                }
            }
        });
    });

    /*
     * Form validation for the interest registration form.  Validates that
     * required fields are filled, email has a simple valid format, passwords
     * match and consent is checked.  Displays error messages inline and
     * prevents submission if validation fails.
     */
    const interestForm = document.getElementById('interestForm');
    if (interestForm) {
        interestForm.addEventListener('submit', (event) => {
            let valid = true;
            // Remove any previous error messages generated by JS
            interestForm.querySelectorAll('.js-error').forEach(el => el.remove());
            const nameField    = document.getElementById('name');
            const emailField   = document.getElementById('email');
            const passwordField= document.getElementById('password');
            const confirmField = document.getElementById('confirm_password');
            const consentBox   = document.getElementById('consent');
            // Helper to show error after a field
            function showError(input, message) {
                const err = document.createElement('p');
                err.className = 'js-error';
                err.style.color = 'red';
                err.style.fontSize = '0.9em';
                err.textContent = message;
                // Insert error message directly after the input element
                input.parentNode.insertBefore(err, input.nextSibling);
                valid = false;
            }
            // Name validation
            if (!nameField.value.trim()) {
                showError(nameField, 'Name is required.');
            }
            // Email validation
            if (!emailField.value.trim()) {
                showError(emailField, 'Email is required.');
            } else {
                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                if (!emailRegex.test(emailField.value.trim())) {
                    showError(emailField, 'Invalid email format.');
                }
            }
            // Password validation
            if (!passwordField.value) {
                showError(passwordField, 'Password is required.');
            }
            if (!confirmField.value) {
                showError(confirmField, 'Confirm password is required.');
            }
            if (passwordField.value && confirmField.value && passwordField.value !== confirmField.value) {
                showError(confirmField, 'Passwords do not match.');
            }
            // Consent check
            if (consentBox && !consentBox.checked) {
                showError(consentBox, 'You must consent to proceed.');
            }
            if (!valid) {
                event.preventDefault();
            }
        });
    }

    /*
     * Form validation for the student login form.  Ensures that email and
     * password fields are not empty and that email appears valid.
     */
    const loginForm = document.getElementById('loginForm');
    if (loginForm) {
        loginForm.addEventListener('submit', (event) => {
            let valid = true;
            loginForm.querySelectorAll('.js-error').forEach(el => el.remove());
            const emailField = document.getElementById('email');
            const passwordField = document.getElementById('password');
            function showError(input, message) {
                const err = document.createElement('p');
                err.className = 'js-error';
                err.style.color = 'red';
                err.style.fontSize = '0.9em';
                err.textContent = message;
                input.parentNode.insertBefore(err, input.nextSibling);
                valid = false;
            }
            if (!emailField.value.trim()) {
                showError(emailField, 'Email is required.');
            } else {
                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                if (!emailRegex.test(emailField.value.trim())) {
                    showError(emailField, 'Invalid email format.');
                }
            }
            if (!passwordField.value) {
                showError(passwordField, 'Password is required.');
            }
            if (!valid) {
                event.preventDefault();
            }
        });
    }
});